services:
  db:
    container_name: db
    image: postgres:15
    environment:
      PGPORT: ${DB_PORT}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 2

  db-test:
    image: postgres:15
    env_file:
      - .env.test
    environment:
      PGPORT: ${DB_PORT}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - pgdata_test:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 2

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: npm run start:dev
    volumes:
      - .:/app
    ports:
      - '3000:3000'
    depends_on:
      pgadmin:
        condition: service_started
      db:
        condition: service_healthy

  specs:
    build:
      context: .
      dockerfile: Dockerfile.specs
    command: npm run test
    env_file:
      - .env.test
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - '3000:3000'
    depends_on:
      - db-test

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - '6001:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - db

volumes:
  pgdata:
  pgadmin-data:
  pgdata_test:
